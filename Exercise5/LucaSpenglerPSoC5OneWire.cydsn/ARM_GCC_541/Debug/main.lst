ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	gADC_ISR
  20              		.bss
  21              		.type	gADC_ISR, %object
  22              		.size	gADC_ISR, 1
  23              	gADC_ISR:
  24 0000 00       		.space	1
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 434F4D20 		.ascii	"COM Port Open\015\012\000"
  28      506F7274 
  28      204F7065 
  28      6E0D0A00 
  29              		.align	2
  30              	.LC1:
  31 0010 7B0D0A09 		.ascii	"{\015\012\011\"Avg ADC Value\": \"%1u mV\",\015\012"
  31      22417667 
  31      20414443 
  31      2056616C 
  31      7565223A 
  32 0030 00       		.ascii	"\000"
  33 0031 000000   		.align	2
  34              	.LC2:
  35 0034 09225465 		.ascii	"\011\"Temperature (Int)\": \"%i.%i C\",\015\012\000"
  35      6D706572 
  35      61747572 
  35      65202849 
  35      6E742922 
  36 0057 00       		.align	2
  37              	.LC3:
  38 0058 09225465 		.ascii	"\011\"Temperature (OneWire)\": = \"%i.%i C\"\015\012"
  38      6D706572 
  38      61747572 
  38      6520284F 
  38      6E655769 
  39 007f 7D0D0A00 		.ascii	"}\015\012\000"
  40 0083 00       		.align	2
  41              	.LC4:
  42 0084 53616D70 		.ascii	"Sample: %lu mV\015\012\000"
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 2


  42      6C653A20 
  42      256C7520 
  42      6D560D0A 
  42      00
  43 0095 000000   		.align	2
  44              	.LC5:
  45 0098 456D756C 		.ascii	"Emulated Data: %x \015\012\000"
  45      61746564 
  45      20446174 
  45      613A2025 
  45      78200D0A 
  46              		.section	.text.main,"ax",%progbits
  47              		.align	2
  48              		.global	main
  49              		.thumb
  50              		.thumb_func
  51              		.type	main, %function
  52              	main:
  53              	.LFB64:
  54              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        **** * ===============================================================================
   3:main.c        **** *
   4:main.c        **** * Names: Luca Spengler (1399655), Fabian Fritz (1394906)
   5:main.c        **** * Emails: luca.spengler2@stud.fra-uas.de, fabian.fritz@stud.fra-uas.de
   6:main.c        **** * Date: 12.04.2024
   7:main.c        **** * Course ID: TX00DB04
   8:main.c        **** * Description: This program reads the analog value of a temperature sensor
   9:main.c        **** *              connected over OneWire and sends the output over UART using
  10:main.c        **** *              the JSON format.
  11:main.c        **** *
  12:main.c        **** * ===============================================================================
  13:main.c        **** *
  14:main.c        **** *
  15:main.c        **** *******************************************************************************
  16:main.c        **** * Copyright (2018-2020), Cypress Semiconductor Corporation. All rights reserved.
  17:main.c        **** *******************************************************************************
  18:main.c        **** * This software, including source code, documentation and related materials
  19:main.c        **** * (“Software”), is owned by Cypress Semiconductor Corporation or one of its
  20:main.c        **** * subsidiaries (“Cypress”) and is protected by and subject to worldwide patent
  21:main.c        **** * protection (United States and foreign), United States copyright laws and
  22:main.c        **** * international treaty provisions. Therefore, you may use this Software only
  23:main.c        **** * as provided in the license agreement accompanying the software package from
  24:main.c        **** * which you obtained this Software (“EULA”).
  25:main.c        **** *
  26:main.c        **** * If no EULA applies, Cypress hereby grants you a personal, nonexclusive,
  27:main.c        **** * non-transferable license to copy, modify, and compile the Software source
  28:main.c        **** * code solely for use in connection with Cypress’s integrated circuit products.
  29:main.c        **** * Any reproduction, modification, translation, compilation, or representation
  30:main.c        **** * of this Software except as specified above is prohibited without the express
  31:main.c        **** * written permission of Cypress.
  32:main.c        **** *
  33:main.c        **** * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND, 
  34:main.c        **** * EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED 
  35:main.c        **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress 
  36:main.c        **** * reserves the right to make changes to the Software without notice. Cypress 
  37:main.c        **** * does not assume any liability arising out of the application or use of the 
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 3


  38:main.c        **** * Software or any product or circuit described in the Software. Cypress does 
  39:main.c        **** * not authorize its products for use in any products where a malfunction or 
  40:main.c        **** * failure of the Cypress product may reasonably be expected to result in 
  41:main.c        **** * significant property damage, injury or death (“High Risk Product”). By 
  42:main.c        **** * including Cypress’s product in a High Risk Product, the manufacturer of such 
  43:main.c        **** * system or application assumes all risk of such use and in doing so agrees to 
  44:main.c        **** * indemnify Cypress against all liability.
  45:main.c        **** *******************************************************************************/
  46:main.c        **** 
  47:main.c        **** #include <project.h>
  48:main.c        **** #include "stdio.h"
  49:main.c        **** #include <stdlib.h>
  50:main.c        **** #include "OneWire.h"
  51:main.c        **** 
  52:main.c        **** /* Project Defines */
  53:main.c        **** #define FALSE  0
  54:main.c        **** #define TRUE   1
  55:main.c        **** #define TRANSMIT_BUFFER_SIZE  64
  56:main.c        **** #define SAMPLE_RATE 10000   //10000 Samples per second
  57:main.c        **** #define CONVERSION_RATE 10 //10 mV per 1°C
  58:main.c        **** #define TEN_CONSTANT 10 //Constant for modulo operation
  59:main.c        **** 
  60:main.c        **** volatile uint8 gADC_ISR = FALSE;    //ADC ISR flag
  61:main.c        **** 
  62:main.c        **** 
  63:main.c        **** /*******************************************************************************
  64:main.c        **** * Function Name: main
  65:main.c        **** ********************************************************************************
  66:main.c        **** *
  67:main.c        **** * Summary:
  68:main.c        **** *  main() performs following functions:
  69:main.c        **** *  1: Starts the ADC and UART components.
  70:main.c        **** *  2: Checks for ADC end of conversion.  Stores latest result in output
  71:main.c        **** *     if conversion complete.
  72:main.c        **** *  3: Checks for UART input.
  73:main.c        **** *     On 'C' or 'c' received: transmits the last sample via the UART.
  74:main.c        **** *     On 'S' or 's' received: continuously transmits samples as they are completed.
  75:main.c        **** *     On 'X' or 'x' received: stops continuously transmitting samples.
  76:main.c        **** *     On 'E' or 'e' received: transmits a dummy byte of data.
  77:main.c        **** *
  78:main.c        **** * Parameters:
  79:main.c        **** *  None.
  80:main.c        **** *
  81:main.c        **** * Return:
  82:main.c        **** *  None.
  83:main.c        **** *
  84:main.c        **** *******************************************************************************/
  85:main.c        **** int main()
  86:main.c        **** {
  55              		.loc 1 86 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 112
  58              		@ frame_needed = 1, uses_anonymous_args = 0
  59 0000 90B5     		push	{r4, r7, lr}
  60              		.cfi_def_cfa_offset 12
  61              		.cfi_offset 4, -12
  62              		.cfi_offset 7, -8
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 4


  63              		.cfi_offset 14, -4
  64 0002 9DB0     		sub	sp, sp, #116
  65              		.cfi_def_cfa_offset 128
  66 0004 00AF     		add	r7, sp, #0
  67              		.cfi_def_cfa_register 7
  87:main.c        ****     /* Variable to store ADC result */
  88:main.c        ****     uint32 Output;
  89:main.c        ****     /* Variable to store UART received character */
  90:main.c        ****     uint8 Ch;
  91:main.c        ****     /* Variable used to send emulated data */
  92:main.c        ****     uint8 EmulatedData;
  93:main.c        ****     /* Flags used to store transmit data commands */
  94:main.c        ****     uint8 ContinuouslySendData;
  95:main.c        ****     uint8 SendSingleByte;
  96:main.c        ****     uint8 SendEmulatedData;
  97:main.c        ****     /* Transmit Buffer */
  98:main.c        ****     char TransmitBuffer[TRANSMIT_BUFFER_SIZE];
  99:main.c        ****     
 100:main.c        ****     /* Start the components */
 101:main.c        ****     ADC_DelSig_1_Start();
  68              		.loc 1 101 0
  69 0006 FFF7FEFF 		bl	ADC_DelSig_1_Start
 102:main.c        ****     UART_1_Start();
  70              		.loc 1 102 0
  71 000a FFF7FEFF 		bl	UART_1_Start
 103:main.c        ****     
 104:main.c        ****     /* Initialize Variables */
 105:main.c        ****     ContinuouslySendData = FALSE;
  72              		.loc 1 105 0
  73 000e 0023     		movs	r3, #0
  74 0010 87F86E30 		strb	r3, [r7, #110]
 106:main.c        ****     SendSingleByte = FALSE;
  75              		.loc 1 106 0
  76 0014 0023     		movs	r3, #0
  77 0016 87F86D30 		strb	r3, [r7, #109]
 107:main.c        ****     SendEmulatedData = FALSE;
  78              		.loc 1 107 0
  79 001a 0023     		movs	r3, #0
  80 001c 87F86C30 		strb	r3, [r7, #108]
 108:main.c        ****     EmulatedData = 0;
  81              		.loc 1 108 0
  82 0020 0023     		movs	r3, #0
  83 0022 87F86F30 		strb	r3, [r7, #111]
 109:main.c        ****     
 110:main.c        ****     /* Start the ADC conversion */
 111:main.c        ****     ADC_DelSig_1_StartConvert();
  84              		.loc 1 111 0
  85 0026 FFF7FEFF 		bl	ADC_DelSig_1_StartConvert
 112:main.c        ****     
 113:main.c        ****     /* Send message to verify COM port is connected properly */
 114:main.c        ****     UART_1_PutString("COM Port Open\r\n");
  86              		.loc 1 114 0
  87 002a 9E48     		ldr	r0, .L24
  88 002c FFF7FEFF 		bl	UART_1_PutString
 115:main.c        ****     
 116:main.c        ****     CyGlobalIntEnable;
  89              		.loc 1 116 0
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 5


  90              		.syntax unified
  91              	@ 116 "main.c" 1
  92 0030 62B6     		CPSIE   i
  93              	@ 0 "" 2
 117:main.c        ****     
 118:main.c        ****     uint8 SampleTracker = 0;
  94              		.loc 1 118 0
  95              		.thumb
  96              		.syntax unified
  97 0032 0023     		movs	r3, #0
  98 0034 87F86B30 		strb	r3, [r7, #107]
 119:main.c        ****     int scratch[2] = {0, 0};
  99              		.loc 1 119 0
 100 0038 0023     		movs	r3, #0
 101 003a 3B60     		str	r3, [r7]
 102 003c 0023     		movs	r3, #0
 103 003e 7B60     		str	r3, [r7, #4]
 120:main.c        ****     uint16 sample_count = 0; //Counts the amount of samples
 104              		.loc 1 120 0
 105 0040 0023     		movs	r3, #0
 106 0042 A7F86830 		strh	r3, [r7, #104]	@ movhi
 121:main.c        ****     uint32 sample_sum = 0; //Stores the sum of the sample values
 107              		.loc 1 121 0
 108 0046 0023     		movs	r3, #0
 109 0048 7B66     		str	r3, [r7, #100]
 122:main.c        ****     uint16 average_value = 0; //Stores the average value of the sample value sum
 110              		.loc 1 122 0
 111 004a 0023     		movs	r3, #0
 112 004c A7F86030 		strh	r3, [r7, #96]	@ movhi
 113              	.L22:
 123:main.c        ****     
 124:main.c        ****     for(;;)
 125:main.c        ****     {        
 126:main.c        ****         /* Non-blocking call to get the latest data recieved  */
 127:main.c        ****         Ch = UART_1_GetChar();
 114              		.loc 1 127 0
 115 0050 FFF7FEFF 		bl	UART_1_GetChar
 116 0054 0346     		mov	r3, r0
 117 0056 87F85F30 		strb	r3, [r7, #95]
 128:main.c        ****         
 129:main.c        ****         /* Set flags based on UART command */
 130:main.c        ****         switch(Ch)
 118              		.loc 1 130 0
 119 005a 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 120 005e 582B     		cmp	r3, #88
 121 0060 21D0     		beq	.L3
 122 0062 582B     		cmp	r3, #88
 123 0064 0BDC     		bgt	.L4
 124 0066 432B     		cmp	r3, #67
 125 0068 15D0     		beq	.L5
 126 006a 432B     		cmp	r3, #67
 127 006c 02DC     		bgt	.L6
 128 006e 002B     		cmp	r3, #0
 129 0070 21D0     		beq	.L23
 131:main.c        ****         {
 132:main.c        ****             case 0:
 133:main.c        ****                 /* No new data was recieved */
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 6


 134:main.c        ****                 break;
 135:main.c        ****             case 'C':
 136:main.c        ****             case 'c':
 137:main.c        ****                 SendSingleByte = TRUE;
 138:main.c        ****                 break;
 139:main.c        ****             case 'S':
 140:main.c        ****             case 's':
 141:main.c        ****                 ContinuouslySendData = TRUE;
 142:main.c        ****                 break;
 143:main.c        ****             case 'X':
 144:main.c        ****             case 'x':
 145:main.c        ****                 ContinuouslySendData = FALSE;
 146:main.c        ****                 break;
 147:main.c        ****             case 'E':
 148:main.c        ****             case 'e':
 149:main.c        ****                 SendEmulatedData = TRUE;
 150:main.c        ****                 break;
 151:main.c        ****             default:
 152:main.c        ****                 /* Place error handling code here */
 153:main.c        ****                 break;    
 130              		.loc 1 153 0
 131 0072 21E0     		b	.L11
 132              	.L6:
 130:main.c        ****         {
 133              		.loc 1 130 0
 134 0074 452B     		cmp	r3, #69
 135 0076 1AD0     		beq	.L8
 136 0078 532B     		cmp	r3, #83
 137 007a 10D0     		beq	.L9
 138              		.loc 1 153 0
 139 007c 1CE0     		b	.L11
 140              	.L4:
 130:main.c        ****         {
 141              		.loc 1 130 0
 142 007e 652B     		cmp	r3, #101
 143 0080 15D0     		beq	.L8
 144 0082 652B     		cmp	r3, #101
 145 0084 02DC     		bgt	.L10
 146 0086 632B     		cmp	r3, #99
 147 0088 05D0     		beq	.L5
 148              		.loc 1 153 0
 149 008a 15E0     		b	.L11
 150              	.L10:
 130:main.c        ****         {
 151              		.loc 1 130 0
 152 008c 732B     		cmp	r3, #115
 153 008e 06D0     		beq	.L9
 154 0090 782B     		cmp	r3, #120
 155 0092 08D0     		beq	.L3
 156              		.loc 1 153 0
 157 0094 10E0     		b	.L11
 158              	.L5:
 137:main.c        ****                 break;
 159              		.loc 1 137 0
 160 0096 0123     		movs	r3, #1
 161 0098 87F86D30 		strb	r3, [r7, #109]
 138:main.c        ****             case 'S':
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 7


 162              		.loc 1 138 0
 163 009c 0CE0     		b	.L11
 164              	.L9:
 141:main.c        ****                 break;
 165              		.loc 1 141 0
 166 009e 0123     		movs	r3, #1
 167 00a0 87F86E30 		strb	r3, [r7, #110]
 142:main.c        ****             case 'X':
 168              		.loc 1 142 0
 169 00a4 08E0     		b	.L11
 170              	.L3:
 145:main.c        ****                 break;
 171              		.loc 1 145 0
 172 00a6 0023     		movs	r3, #0
 173 00a8 87F86E30 		strb	r3, [r7, #110]
 146:main.c        ****             case 'E':
 174              		.loc 1 146 0
 175 00ac 04E0     		b	.L11
 176              	.L8:
 149:main.c        ****                 break;
 177              		.loc 1 149 0
 178 00ae 0123     		movs	r3, #1
 179 00b0 87F86C30 		strb	r3, [r7, #108]
 150:main.c        ****             default:
 180              		.loc 1 150 0
 181 00b4 00E0     		b	.L11
 182              	.L23:
 134:main.c        ****             case 'C':
 183              		.loc 1 134 0
 184 00b6 00BF     		nop
 185              	.L11:
 154:main.c        ****         }
 155:main.c        ****         
 156:main.c        ****         /*Counting and conversion logic*/
 157:main.c        ****         if(gADC_ISR){   //Check if the ADC ISR flag is set
 186              		.loc 1 157 0
 187 00b8 7B4B     		ldr	r3, .L24+4
 188 00ba 1B78     		ldrb	r3, [r3]
 189 00bc DBB2     		uxtb	r3, r3
 190 00be 002B     		cmp	r3, #0
 191 00c0 00F0AD80 		beq	.L12
 158:main.c        ****             gADC_ISR = FALSE;   //Reset the ISR flag
 192              		.loc 1 158 0
 193 00c4 784B     		ldr	r3, .L24+4
 194 00c6 0022     		movs	r2, #0
 195 00c8 1A70     		strb	r2, [r3]
 159:main.c        ****             sample_sum += ADC_DelSig_1_CountsTo_mVolts(ADC_DelSig_1_GetResult16());   //Add the sam
 196              		.loc 1 159 0
 197 00ca FFF7FEFF 		bl	ADC_DelSig_1_GetResult16
 198 00ce 0346     		mov	r3, r0
 199 00d0 1846     		mov	r0, r3
 200 00d2 FFF7FEFF 		bl	ADC_DelSig_1_CountsTo_mVolts
 201 00d6 0346     		mov	r3, r0
 202 00d8 1A46     		mov	r2, r3
 203 00da 7B6E     		ldr	r3, [r7, #100]
 204 00dc 1344     		add	r3, r3, r2
 205 00de 7B66     		str	r3, [r7, #100]
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 8


 160:main.c        ****             
 161:main.c        ****             if(sample_count == 0){      //Only initiate communication at the start of every second
 206              		.loc 1 161 0
 207 00e0 B7F86830 		ldrh	r3, [r7, #104]
 208 00e4 002B     		cmp	r3, #0
 209 00e6 2BD1     		bne	.L13
 210              	.LBB2:
 162:main.c        ****                 int returnValue = ResetBus();   //Reset the onewire slave device
 211              		.loc 1 162 0
 212 00e8 FFF7FEFF 		bl	ResetBus
 213 00ec B865     		str	r0, [r7, #88]
 163:main.c        ****                 WriteByte(SKIP_ROM);    //Skip the address as  only one device is connected
 214              		.loc 1 163 0
 215 00ee CC20     		movs	r0, #204
 216 00f0 FFF7FEFF 		bl	WriteByte
 164:main.c        ****                 if(SampleTracker > 0){  //Conversion only happens every second iteration
 217              		.loc 1 164 0
 218 00f4 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 219 00f8 002B     		cmp	r3, #0
 220 00fa 06D0     		beq	.L14
 165:main.c        ****                     onewire_pin_SetDriveMode(onewire_pin_DM_STRONG);    //Change the pin drive mode
 221              		.loc 1 165 0
 222 00fc 0C20     		movs	r0, #12
 223 00fe FFF7FEFF 		bl	onewire_pin_SetDriveMode
 166:main.c        ****                     WriteByte(TEMP_CONVERSION); //Initiate the conversion
 224              		.loc 1 166 0
 225 0102 4420     		movs	r0, #68
 226 0104 FFF7FEFF 		bl	WriteByte
 227 0108 1AE0     		b	.L13
 228              	.L14:
 167:main.c        ****                     //CyDelay(WAIT_K);
 168:main.c        ****                 }else{    
 169:main.c        ****                     WriteByte(READ_SCRATCH);    //Tell the Slave that you want the read the scratch
 229              		.loc 1 169 0
 230 010a BE20     		movs	r0, #190
 231 010c FFF7FEFF 		bl	WriteByte
 232              	.LBB3:
 170:main.c        ****                     for(uint8 i = 0; i < 2; i++){   //Read two bytes
 233              		.loc 1 170 0
 234 0110 0023     		movs	r3, #0
 235 0112 87F86330 		strb	r3, [r7, #99]
 236 0116 0FE0     		b	.L15
 237              	.L16:
 171:main.c        ****                         scratch[i] = ReadByte();    //Save the return value in an array
 238              		.loc 1 171 0 discriminator 3
 239 0118 97F86340 		ldrb	r4, [r7, #99]	@ zero_extendqisi2
 240 011c FFF7FEFF 		bl	ReadByte
 241 0120 0246     		mov	r2, r0
 242 0122 A300     		lsls	r3, r4, #2
 243 0124 07F17001 		add	r1, r7, #112
 244 0128 0B44     		add	r3, r3, r1
 245 012a 43F8702C 		str	r2, [r3, #-112]
 170:main.c        ****                     for(uint8 i = 0; i < 2; i++){   //Read two bytes
 246              		.loc 1 170 0 discriminator 3
 247 012e 97F86330 		ldrb	r3, [r7, #99]	@ zero_extendqisi2
 248 0132 0133     		adds	r3, r3, #1
 249 0134 87F86330 		strb	r3, [r7, #99]
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 9


 250              	.L15:
 170:main.c        ****                     for(uint8 i = 0; i < 2; i++){   //Read two bytes
 251              		.loc 1 170 0 is_stmt 0 discriminator 1
 252 0138 97F86330 		ldrb	r3, [r7, #99]	@ zero_extendqisi2
 253 013c 012B     		cmp	r3, #1
 254 013e EBD9     		bls	.L16
 255              	.L13:
 256              	.LBE3:
 257              	.LBE2:
 172:main.c        ****                     }
 173:main.c        ****                 }
 174:main.c        ****             }
 175:main.c        ****             
 176:main.c        ****             sample_count++; //Increment the sample counter
 258              		.loc 1 176 0 is_stmt 1
 259 0140 B7F86830 		ldrh	r3, [r7, #104]
 260 0144 0133     		adds	r3, r3, #1
 261 0146 A7F86830 		strh	r3, [r7, #104]	@ movhi
 177:main.c        ****                     
 178:main.c        ****             if(sample_count >= SAMPLE_RATE){ //Check if the sample threshhold has been reached
 262              		.loc 1 178 0
 263 014a B7F86830 		ldrh	r3, [r7, #104]
 264 014e 42F20F72 		movw	r2, #9999
 265 0152 9342     		cmp	r3, r2
 266 0154 63D9     		bls	.L12
 267              	.LBB4:
 179:main.c        ****                 average_value = sample_sum / SAMPLE_RATE; //Calculate the average sampled value
 268              		.loc 1 179 0
 269 0156 7B6E     		ldr	r3, [r7, #100]
 270 0158 544A     		ldr	r2, .L24+8
 271 015a A2FB0323 		umull	r2, r3, r2, r3
 272 015e 5B0B     		lsrs	r3, r3, #13
 273 0160 A7F86030 		strh	r3, [r7, #96]	@ movhi
 180:main.c        ****                 sprintf(TransmitBuffer, "{\r\n\t\"Avg ADC Value\": \"%1u mV\",\r\n", average_value)
 274              		.loc 1 180 0
 275 0164 B7F86020 		ldrh	r2, [r7, #96]
 276 0168 07F10803 		add	r3, r7, #8
 277 016c 5049     		ldr	r1, .L24+12
 278 016e 1846     		mov	r0, r3
 279 0170 FFF7FEFF 		bl	sprintf
 181:main.c        ****                 UART_1_PutString(TransmitBuffer);   //Send the output string via UART
 280              		.loc 1 181 0
 281 0174 07F10803 		add	r3, r7, #8
 282 0178 1846     		mov	r0, r3
 283 017a FFF7FEFF 		bl	UART_1_PutString
 182:main.c        ****                 sprintf(TransmitBuffer, "\t\"Temperature (Int)\": \"%i.%i C\",\r\n", average_value 
 284              		.loc 1 182 0
 285 017e B7F86030 		ldrh	r3, [r7, #96]
 286 0182 4C4A     		ldr	r2, .L24+16
 287 0184 A2FB0323 		umull	r2, r3, r2, r3
 288 0188 DB08     		lsrs	r3, r3, #3
 289 018a 9BB2     		uxth	r3, r3
 290 018c 1C46     		mov	r4, r3
 291 018e B7F86020 		ldrh	r2, [r7, #96]
 292 0192 484B     		ldr	r3, .L24+16
 293 0194 A3FB0213 		umull	r1, r3, r3, r2
 294 0198 D908     		lsrs	r1, r3, #3
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 10


 295 019a 0B46     		mov	r3, r1
 296 019c 9B00     		lsls	r3, r3, #2
 297 019e 0B44     		add	r3, r3, r1
 298 01a0 5B00     		lsls	r3, r3, #1
 299 01a2 D31A     		subs	r3, r2, r3
 300 01a4 9BB2     		uxth	r3, r3
 301 01a6 07F10800 		add	r0, r7, #8
 302 01aa 2246     		mov	r2, r4
 303 01ac 4249     		ldr	r1, .L24+20
 304 01ae FFF7FEFF 		bl	sprintf
 183:main.c        ****                 UART_1_PutString(TransmitBuffer);   //Send the output string via UART
 305              		.loc 1 183 0
 306 01b2 07F10803 		add	r3, r7, #8
 307 01b6 1846     		mov	r0, r3
 308 01b8 FFF7FEFF 		bl	UART_1_PutString
 184:main.c        ****                 sample_count = 0;   //Reset the sample count
 309              		.loc 1 184 0
 310 01bc 0023     		movs	r3, #0
 311 01be A7F86830 		strh	r3, [r7, #104]	@ movhi
 185:main.c        ****                 sample_sum = 0;   //Reset the sample sum value
 312              		.loc 1 185 0
 313 01c2 0023     		movs	r3, #0
 314 01c4 7B66     		str	r3, [r7, #100]
 186:main.c        ****                 
 187:main.c        ****                 /* Calculate the OneWire temperature */
 188:main.c        ****                 SampleTracker = ~SampleTracker; //Invert the sample tracker, since it only gets pol
 315              		.loc 1 188 0
 316 01c6 97F86B30 		ldrb	r3, [r7, #107]
 317 01ca DB43     		mvns	r3, r3
 318 01cc 87F86B30 		strb	r3, [r7, #107]
 189:main.c        ****                 if(SampleTracker > 0){  //Check if a conversion has happened should be polled
 319              		.loc 1 189 0
 320 01d0 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 321 01d4 002B     		cmp	r3, #0
 322 01d6 02D0     		beq	.L17
 190:main.c        ****                     onewire_pin_SetDriveMode(onewire_pin_DM_RES_UP);    //reset the drive mode
 323              		.loc 1 190 0
 324 01d8 0420     		movs	r0, #4
 325 01da FFF7FEFF 		bl	onewire_pin_SetDriveMode
 326              	.L17:
 191:main.c        ****                 }
 192:main.c        ****                 int msg = (scratch[1] << 8) | scratch[0];   //Convert two bytes to one int
 327              		.loc 1 192 0
 328 01de 7B68     		ldr	r3, [r7, #4]
 329 01e0 1A02     		lsls	r2, r3, #8
 330 01e2 3B68     		ldr	r3, [r7]
 331 01e4 1343     		orrs	r3, r3, r2
 332 01e6 7B65     		str	r3, [r7, #84]
 193:main.c        ****                 /* Inaccurate way of obtaining the fractional part, but the accuracy of the sensor 
 194:main.c        ****                 int msg_frac = ((msg & 15) * 10) / 16;  //Only the first four bits are needed, divi
 333              		.loc 1 194 0
 334 01e8 7B6D     		ldr	r3, [r7, #84]
 335 01ea 03F00F02 		and	r2, r3, #15
 336 01ee 1346     		mov	r3, r2
 337 01f0 9B00     		lsls	r3, r3, #2
 338 01f2 1344     		add	r3, r3, r2
 339 01f4 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 11


 340 01f6 002B     		cmp	r3, #0
 341 01f8 00DA     		bge	.L18
 342 01fa 0F33     		adds	r3, r3, #15
 343              	.L18:
 344 01fc 1B11     		asrs	r3, r3, #4
 345 01fe 3B65     		str	r3, [r7, #80]
 195:main.c        ****                 int msg_int = msg >> 4; //The first 4 bits are the fractional part
 346              		.loc 1 195 0
 347 0200 7B6D     		ldr	r3, [r7, #84]
 348 0202 1B11     		asrs	r3, r3, #4
 349 0204 FB64     		str	r3, [r7, #76]
 196:main.c        ****                 sprintf(TransmitBuffer, "\t\"Temperature (OneWire)\": = \"%i.%i C\"\r\n}\r\n", msg_
 350              		.loc 1 196 0
 351 0206 07F10800 		add	r0, r7, #8
 352 020a 3B6D     		ldr	r3, [r7, #80]
 353 020c FA6C     		ldr	r2, [r7, #76]
 354 020e 2B49     		ldr	r1, .L24+24
 355 0210 FFF7FEFF 		bl	sprintf
 197:main.c        ****                 UART_1_PutString(TransmitBuffer);   //Send the output string
 356              		.loc 1 197 0
 357 0214 07F10803 		add	r3, r7, #8
 358 0218 1846     		mov	r0, r3
 359 021a FFF7FEFF 		bl	UART_1_PutString
 360              	.L12:
 361              	.LBE4:
 198:main.c        ****             }
 199:main.c        ****         }
 200:main.c        ****         
 201:main.c        ****         
 202:main.c        ****         /* Check to see if an ADC conversion has completed */
 203:main.c        ****         if(ADC_DelSig_1_IsEndConversion(ADC_DelSig_1_RETURN_STATUS))
 362              		.loc 1 203 0
 363 021e 0120     		movs	r0, #1
 364 0220 FFF7FEFF 		bl	ADC_DelSig_1_IsEndConversion
 365 0224 0346     		mov	r3, r0
 366 0226 002B     		cmp	r3, #0
 367 0228 3FF412AF 		beq	.L22
 204:main.c        ****         {
 205:main.c        ****             /* Use the GetResult16 API to get an 8 bit unsigned result in
 206:main.c        ****              * single ended mode.  The API CountsTo_mVolts is then used
 207:main.c        ****              * to convert the ADC counts into mV before transmitting via
 208:main.c        ****              * the UART.  See the datasheet API description for more
 209:main.c        ****              * details */
 210:main.c        ****             Output = ADC_DelSig_1_CountsTo_mVolts(ADC_DelSig_1_GetResult16());
 368              		.loc 1 210 0
 369 022c FFF7FEFF 		bl	ADC_DelSig_1_GetResult16
 370 0230 0346     		mov	r3, r0
 371 0232 1846     		mov	r0, r3
 372 0234 FFF7FEFF 		bl	ADC_DelSig_1_CountsTo_mVolts
 373 0238 0346     		mov	r3, r0
 374 023a BB64     		str	r3, [r7, #72]
 211:main.c        ****             
 212:main.c        ****             /* Send data based on last UART command */
 213:main.c        ****             if(SendSingleByte || ContinuouslySendData)
 375              		.loc 1 213 0
 376 023c 97F86D30 		ldrb	r3, [r7, #109]	@ zero_extendqisi2
 377 0240 002B     		cmp	r3, #0
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 12


 378 0242 03D1     		bne	.L20
 379              		.loc 1 213 0 is_stmt 0 discriminator 1
 380 0244 97F86E30 		ldrb	r3, [r7, #110]	@ zero_extendqisi2
 381 0248 002B     		cmp	r3, #0
 382 024a 0FD0     		beq	.L21
 383              	.L20:
 214:main.c        ****             {
 215:main.c        ****                 /* Format ADC result for transmition */
 216:main.c        ****                 sprintf(TransmitBuffer, "Sample: %lu mV\r\n", Output);
 384              		.loc 1 216 0 is_stmt 1
 385 024c 07F10803 		add	r3, r7, #8
 386 0250 BA6C     		ldr	r2, [r7, #72]
 387 0252 1B49     		ldr	r1, .L24+28
 388 0254 1846     		mov	r0, r3
 389 0256 FFF7FEFF 		bl	sprintf
 217:main.c        ****                 /* Send out the data */
 218:main.c        ****                 UART_1_PutString(TransmitBuffer);
 390              		.loc 1 218 0
 391 025a 07F10803 		add	r3, r7, #8
 392 025e 1846     		mov	r0, r3
 393 0260 FFF7FEFF 		bl	UART_1_PutString
 219:main.c        ****                 /* Reset the send once flag */
 220:main.c        ****                 SendSingleByte = FALSE;
 394              		.loc 1 220 0
 395 0264 0023     		movs	r3, #0
 396 0266 87F86D30 		strb	r3, [r7, #109]
 397 026a 19E0     		b	.L19
 398              	.L21:
 221:main.c        ****             }
 222:main.c        ****             else if(SendEmulatedData)
 399              		.loc 1 222 0
 400 026c 97F86C30 		ldrb	r3, [r7, #108]	@ zero_extendqisi2
 401 0270 002B     		cmp	r3, #0
 402 0272 3FF4EDAE 		beq	.L22
 223:main.c        ****             {
 224:main.c        ****                 /* Format ADC result for transmition */
 225:main.c        ****                 sprintf(TransmitBuffer, "Emulated Data: %x \r\n", EmulatedData);
 403              		.loc 1 225 0
 404 0276 97F86F20 		ldrb	r2, [r7, #111]	@ zero_extendqisi2
 405 027a 07F10803 		add	r3, r7, #8
 406 027e 1149     		ldr	r1, .L24+32
 407 0280 1846     		mov	r0, r3
 408 0282 FFF7FEFF 		bl	sprintf
 226:main.c        ****                 /* Send out the data */
 227:main.c        ****                 UART_1_PutString(TransmitBuffer);
 409              		.loc 1 227 0
 410 0286 07F10803 		add	r3, r7, #8
 411 028a 1846     		mov	r0, r3
 412 028c FFF7FEFF 		bl	UART_1_PutString
 228:main.c        ****                 EmulatedData++;
 413              		.loc 1 228 0
 414 0290 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 415 0294 0133     		adds	r3, r3, #1
 416 0296 87F86F30 		strb	r3, [r7, #111]
 229:main.c        ****                 /* Reset the send once flag */
 230:main.c        ****                 SendEmulatedData = FALSE;   
 417              		.loc 1 230 0
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 13


 418 029a 0023     		movs	r3, #0
 419 029c 87F86C30 		strb	r3, [r7, #108]
 420              	.L19:
 231:main.c        ****             }
 232:main.c        ****         }
 233:main.c        ****     }
 421              		.loc 1 233 0
 422 02a0 D6E6     		b	.L22
 423              	.L25:
 424 02a2 00BF     		.align	2
 425              	.L24:
 426 02a4 00000000 		.word	.LC0
 427 02a8 00000000 		.word	gADC_ISR
 428 02ac 5917B7D1 		.word	-776530087
 429 02b0 10000000 		.word	.LC1
 430 02b4 CDCCCCCC 		.word	-858993459
 431 02b8 34000000 		.word	.LC2
 432 02bc 58000000 		.word	.LC3
 433 02c0 84000000 		.word	.LC4
 434 02c4 98000000 		.word	.LC5
 435              		.cfi_endproc
 436              	.LFE64:
 437              		.size	main, .-main
 438              		.text
 439              	.Letext0:
 440              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 441              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 442              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 443              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 444              		.section	.debug_info,"",%progbits
 445              	.Ldebug_info0:
 446 0000 35020000 		.4byte	0x235
 447 0004 0400     		.2byte	0x4
 448 0006 00000000 		.4byte	.Ldebug_abbrev0
 449 000a 04       		.byte	0x4
 450 000b 01       		.uleb128 0x1
 451 000c 0D000000 		.4byte	.LASF35
 452 0010 0C       		.byte	0xc
 453 0011 3E020000 		.4byte	.LASF36
 454 0015 67010000 		.4byte	.LASF37
 455 0019 00000000 		.4byte	.Ldebug_ranges0+0
 456 001d 00000000 		.4byte	0
 457 0021 00000000 		.4byte	.Ldebug_line0
 458 0025 02       		.uleb128 0x2
 459 0026 01       		.byte	0x1
 460 0027 06       		.byte	0x6
 461 0028 87020000 		.4byte	.LASF0
 462 002c 02       		.uleb128 0x2
 463 002d 01       		.byte	0x1
 464 002e 08       		.byte	0x8
 465 002f 30010000 		.4byte	.LASF1
 466 0033 02       		.uleb128 0x2
 467 0034 02       		.byte	0x2
 468 0035 05       		.byte	0x5
 469 0036 56010000 		.4byte	.LASF2
 470 003a 02       		.uleb128 0x2
 471 003b 02       		.byte	0x2
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 14


 472 003c 07       		.byte	0x7
 473 003d 10010000 		.4byte	.LASF3
 474 0041 03       		.uleb128 0x3
 475 0042 A9000000 		.4byte	.LASF9
 476 0046 02       		.byte	0x2
 477 0047 3F       		.byte	0x3f
 478 0048 4C000000 		.4byte	0x4c
 479 004c 02       		.uleb128 0x2
 480 004d 04       		.byte	0x4
 481 004e 05       		.byte	0x5
 482 004f 69020000 		.4byte	.LASF4
 483 0053 02       		.uleb128 0x2
 484 0054 04       		.byte	0x4
 485 0055 07       		.byte	0x7
 486 0056 FE000000 		.4byte	.LASF5
 487 005a 02       		.uleb128 0x2
 488 005b 08       		.byte	0x8
 489 005c 05       		.byte	0x5
 490 005d 30020000 		.4byte	.LASF6
 491 0061 02       		.uleb128 0x2
 492 0062 08       		.byte	0x8
 493 0063 07       		.byte	0x7
 494 0064 F0010000 		.4byte	.LASF7
 495 0068 04       		.uleb128 0x4
 496 0069 04       		.byte	0x4
 497 006a 05       		.byte	0x5
 498 006b 696E7400 		.ascii	"int\000"
 499 006f 02       		.uleb128 0x2
 500 0070 04       		.byte	0x4
 501 0071 07       		.byte	0x7
 502 0072 E3010000 		.4byte	.LASF8
 503 0076 03       		.uleb128 0x3
 504 0077 10020000 		.4byte	.LASF10
 505 007b 03       		.byte	0x3
 506 007c 2C       		.byte	0x2c
 507 007d 41000000 		.4byte	0x41
 508 0081 05       		.uleb128 0x5
 509 0082 63020000 		.4byte	.LASF11
 510 0086 04       		.byte	0x4
 511 0087 E801     		.2byte	0x1e8
 512 0089 2C000000 		.4byte	0x2c
 513 008d 05       		.uleb128 0x5
 514 008e 60010000 		.4byte	.LASF12
 515 0092 04       		.byte	0x4
 516 0093 E901     		.2byte	0x1e9
 517 0095 3A000000 		.4byte	0x3a
 518 0099 05       		.uleb128 0x5
 519 009a D7010000 		.4byte	.LASF13
 520 009e 04       		.byte	0x4
 521 009f EA01     		.2byte	0x1ea
 522 00a1 53000000 		.4byte	0x53
 523 00a5 02       		.uleb128 0x2
 524 00a6 04       		.byte	0x4
 525 00a7 04       		.byte	0x4
 526 00a8 CF000000 		.4byte	.LASF14
 527 00ac 02       		.uleb128 0x2
 528 00ad 08       		.byte	0x8
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 15


 529 00ae 04       		.byte	0x4
 530 00af 4F010000 		.4byte	.LASF15
 531 00b3 02       		.uleb128 0x2
 532 00b4 01       		.byte	0x1
 533 00b5 08       		.byte	0x8
 534 00b6 45020000 		.4byte	.LASF16
 535 00ba 06       		.uleb128 0x6
 536 00bb 81000000 		.4byte	0x81
 537 00bf 02       		.uleb128 0x2
 538 00c0 08       		.byte	0x8
 539 00c1 04       		.byte	0x4
 540 00c2 72020000 		.4byte	.LASF17
 541 00c6 02       		.uleb128 0x2
 542 00c7 04       		.byte	0x4
 543 00c8 07       		.byte	0x7
 544 00c9 27020000 		.4byte	.LASF18
 545 00cd 07       		.uleb128 0x7
 546 00ce DE010000 		.4byte	.LASF38
 547 00d2 01       		.byte	0x1
 548 00d3 55       		.byte	0x55
 549 00d4 68000000 		.4byte	0x68
 550 00d8 00000000 		.4byte	.LFB64
 551 00dc C8020000 		.4byte	.LFE64-.LFB64
 552 00e0 01       		.uleb128 0x1
 553 00e1 9C       		.byte	0x9c
 554 00e2 F6010000 		.4byte	0x1f6
 555 00e6 08       		.uleb128 0x8
 556 00e7 B3000000 		.4byte	.LASF19
 557 00eb 01       		.byte	0x1
 558 00ec 58       		.byte	0x58
 559 00ed 99000000 		.4byte	0x99
 560 00f1 02       		.uleb128 0x2
 561 00f2 91       		.byte	0x91
 562 00f3 48       		.sleb128 -56
 563 00f4 09       		.uleb128 0x9
 564 00f5 436800   		.ascii	"Ch\000"
 565 00f8 01       		.byte	0x1
 566 00f9 5A       		.byte	0x5a
 567 00fa 81000000 		.4byte	0x81
 568 00fe 02       		.uleb128 0x2
 569 00ff 91       		.byte	0x91
 570 0100 5F       		.sleb128 -33
 571 0101 08       		.uleb128 0x8
 572 0102 00000000 		.4byte	.LASF20
 573 0106 01       		.byte	0x1
 574 0107 5C       		.byte	0x5c
 575 0108 81000000 		.4byte	0x81
 576 010c 02       		.uleb128 0x2
 577 010d 91       		.byte	0x91
 578 010e 6F       		.sleb128 -17
 579 010f 08       		.uleb128 0x8
 580 0110 BA000000 		.4byte	.LASF21
 581 0114 01       		.byte	0x1
 582 0115 5E       		.byte	0x5e
 583 0116 81000000 		.4byte	0x81
 584 011a 02       		.uleb128 0x2
 585 011b 91       		.byte	0x91
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 16


 586 011c 6E       		.sleb128 -18
 587 011d 08       		.uleb128 0x8
 588 011e 93020000 		.4byte	.LASF22
 589 0122 01       		.byte	0x1
 590 0123 5F       		.byte	0x5f
 591 0124 81000000 		.4byte	0x81
 592 0128 02       		.uleb128 0x2
 593 0129 91       		.byte	0x91
 594 012a 6D       		.sleb128 -19
 595 012b 08       		.uleb128 0x8
 596 012c 3E010000 		.4byte	.LASF23
 597 0130 01       		.byte	0x1
 598 0131 60       		.byte	0x60
 599 0132 81000000 		.4byte	0x81
 600 0136 02       		.uleb128 0x2
 601 0137 91       		.byte	0x91
 602 0138 6C       		.sleb128 -20
 603 0139 08       		.uleb128 0x8
 604 013a 18020000 		.4byte	.LASF24
 605 013e 01       		.byte	0x1
 606 013f 62       		.byte	0x62
 607 0140 F6010000 		.4byte	0x1f6
 608 0144 03       		.uleb128 0x3
 609 0145 91       		.byte	0x91
 610 0146 887F     		.sleb128 -120
 611 0148 08       		.uleb128 0x8
 612 0149 55020000 		.4byte	.LASF25
 613 014d 01       		.byte	0x1
 614 014e 76       		.byte	0x76
 615 014f 81000000 		.4byte	0x81
 616 0153 02       		.uleb128 0x2
 617 0154 91       		.byte	0x91
 618 0155 6B       		.sleb128 -21
 619 0156 08       		.uleb128 0x8
 620 0157 D5000000 		.4byte	.LASF26
 621 015b 01       		.byte	0x1
 622 015c 77       		.byte	0x77
 623 015d 06020000 		.4byte	0x206
 624 0161 03       		.uleb128 0x3
 625 0162 91       		.byte	0x91
 626 0163 807F     		.sleb128 -128
 627 0165 08       		.uleb128 0x8
 628 0166 E5000000 		.4byte	.LASF27
 629 016a 01       		.byte	0x1
 630 016b 78       		.byte	0x78
 631 016c 8D000000 		.4byte	0x8d
 632 0170 02       		.uleb128 0x2
 633 0171 91       		.byte	0x91
 634 0172 68       		.sleb128 -24
 635 0173 08       		.uleb128 0x8
 636 0174 4A020000 		.4byte	.LASF28
 637 0178 01       		.byte	0x1
 638 0179 79       		.byte	0x79
 639 017a 99000000 		.4byte	0x99
 640 017e 02       		.uleb128 0x2
 641 017f 91       		.byte	0x91
 642 0180 64       		.sleb128 -28
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 17


 643 0181 08       		.uleb128 0x8
 644 0182 9B000000 		.4byte	.LASF29
 645 0186 01       		.byte	0x1
 646 0187 7A       		.byte	0x7a
 647 0188 8D000000 		.4byte	0x8d
 648 018c 02       		.uleb128 0x2
 649 018d 91       		.byte	0x91
 650 018e 60       		.sleb128 -32
 651 018f 0A       		.uleb128 0xa
 652 0190 E8000000 		.4byte	.LBB2
 653 0194 58000000 		.4byte	.LBE2-.LBB2
 654 0198 C1010000 		.4byte	0x1c1
 655 019c 08       		.uleb128 0x8
 656 019d F2000000 		.4byte	.LASF30
 657 01a1 01       		.byte	0x1
 658 01a2 A2       		.byte	0xa2
 659 01a3 68000000 		.4byte	0x68
 660 01a7 02       		.uleb128 0x2
 661 01a8 91       		.byte	0x91
 662 01a9 58       		.sleb128 -40
 663 01aa 0B       		.uleb128 0xb
 664 01ab 10010000 		.4byte	.LBB3
 665 01af 30000000 		.4byte	.LBE3-.LBB3
 666 01b3 09       		.uleb128 0x9
 667 01b4 6900     		.ascii	"i\000"
 668 01b6 01       		.byte	0x1
 669 01b7 AA       		.byte	0xaa
 670 01b8 81000000 		.4byte	0x81
 671 01bc 02       		.uleb128 0x2
 672 01bd 91       		.byte	0x91
 673 01be 63       		.sleb128 -29
 674 01bf 00       		.byte	0
 675 01c0 00       		.byte	0
 676 01c1 0B       		.uleb128 0xb
 677 01c2 56010000 		.4byte	.LBB4
 678 01c6 C8000000 		.4byte	.LBE4-.LBB4
 679 01ca 09       		.uleb128 0x9
 680 01cb 6D736700 		.ascii	"msg\000"
 681 01cf 01       		.byte	0x1
 682 01d0 C0       		.byte	0xc0
 683 01d1 68000000 		.4byte	0x68
 684 01d5 02       		.uleb128 0x2
 685 01d6 91       		.byte	0x91
 686 01d7 54       		.sleb128 -44
 687 01d8 08       		.uleb128 0x8
 688 01d9 7E020000 		.4byte	.LASF31
 689 01dd 01       		.byte	0x1
 690 01de C2       		.byte	0xc2
 691 01df 68000000 		.4byte	0x68
 692 01e3 02       		.uleb128 0x2
 693 01e4 91       		.byte	0x91
 694 01e5 50       		.sleb128 -48
 695 01e6 08       		.uleb128 0x8
 696 01e7 DD000000 		.4byte	.LASF32
 697 01eb 01       		.byte	0x1
 698 01ec C3       		.byte	0xc3
 699 01ed 68000000 		.4byte	0x68
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 18


 700 01f1 02       		.uleb128 0x2
 701 01f2 91       		.byte	0x91
 702 01f3 4C       		.sleb128 -52
 703 01f4 00       		.byte	0
 704 01f5 00       		.byte	0
 705 01f6 0C       		.uleb128 0xc
 706 01f7 B3000000 		.4byte	0xb3
 707 01fb 06020000 		.4byte	0x206
 708 01ff 0D       		.uleb128 0xd
 709 0200 C6000000 		.4byte	0xc6
 710 0204 3F       		.byte	0x3f
 711 0205 00       		.byte	0
 712 0206 0C       		.uleb128 0xc
 713 0207 68000000 		.4byte	0x68
 714 020b 16020000 		.4byte	0x216
 715 020f 0D       		.uleb128 0xd
 716 0210 C6000000 		.4byte	0xc6
 717 0214 01       		.byte	0x1
 718 0215 00       		.byte	0
 719 0216 0E       		.uleb128 0xe
 720 0217 23010000 		.4byte	.LASF33
 721 021b 05       		.byte	0x5
 722 021c 1207     		.2byte	0x712
 723 021e 22020000 		.4byte	0x222
 724 0222 06       		.uleb128 0x6
 725 0223 76000000 		.4byte	0x76
 726 0227 0F       		.uleb128 0xf
 727 0228 07020000 		.4byte	.LASF34
 728 022c 01       		.byte	0x1
 729 022d 3C       		.byte	0x3c
 730 022e BA000000 		.4byte	0xba
 731 0232 05       		.uleb128 0x5
 732 0233 03       		.byte	0x3
 733 0234 00000000 		.4byte	gADC_ISR
 734 0238 00       		.byte	0
 735              		.section	.debug_abbrev,"",%progbits
 736              	.Ldebug_abbrev0:
 737 0000 01       		.uleb128 0x1
 738 0001 11       		.uleb128 0x11
 739 0002 01       		.byte	0x1
 740 0003 25       		.uleb128 0x25
 741 0004 0E       		.uleb128 0xe
 742 0005 13       		.uleb128 0x13
 743 0006 0B       		.uleb128 0xb
 744 0007 03       		.uleb128 0x3
 745 0008 0E       		.uleb128 0xe
 746 0009 1B       		.uleb128 0x1b
 747 000a 0E       		.uleb128 0xe
 748 000b 55       		.uleb128 0x55
 749 000c 17       		.uleb128 0x17
 750 000d 11       		.uleb128 0x11
 751 000e 01       		.uleb128 0x1
 752 000f 10       		.uleb128 0x10
 753 0010 17       		.uleb128 0x17
 754 0011 00       		.byte	0
 755 0012 00       		.byte	0
 756 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 19


 757 0014 24       		.uleb128 0x24
 758 0015 00       		.byte	0
 759 0016 0B       		.uleb128 0xb
 760 0017 0B       		.uleb128 0xb
 761 0018 3E       		.uleb128 0x3e
 762 0019 0B       		.uleb128 0xb
 763 001a 03       		.uleb128 0x3
 764 001b 0E       		.uleb128 0xe
 765 001c 00       		.byte	0
 766 001d 00       		.byte	0
 767 001e 03       		.uleb128 0x3
 768 001f 16       		.uleb128 0x16
 769 0020 00       		.byte	0
 770 0021 03       		.uleb128 0x3
 771 0022 0E       		.uleb128 0xe
 772 0023 3A       		.uleb128 0x3a
 773 0024 0B       		.uleb128 0xb
 774 0025 3B       		.uleb128 0x3b
 775 0026 0B       		.uleb128 0xb
 776 0027 49       		.uleb128 0x49
 777 0028 13       		.uleb128 0x13
 778 0029 00       		.byte	0
 779 002a 00       		.byte	0
 780 002b 04       		.uleb128 0x4
 781 002c 24       		.uleb128 0x24
 782 002d 00       		.byte	0
 783 002e 0B       		.uleb128 0xb
 784 002f 0B       		.uleb128 0xb
 785 0030 3E       		.uleb128 0x3e
 786 0031 0B       		.uleb128 0xb
 787 0032 03       		.uleb128 0x3
 788 0033 08       		.uleb128 0x8
 789 0034 00       		.byte	0
 790 0035 00       		.byte	0
 791 0036 05       		.uleb128 0x5
 792 0037 16       		.uleb128 0x16
 793 0038 00       		.byte	0
 794 0039 03       		.uleb128 0x3
 795 003a 0E       		.uleb128 0xe
 796 003b 3A       		.uleb128 0x3a
 797 003c 0B       		.uleb128 0xb
 798 003d 3B       		.uleb128 0x3b
 799 003e 05       		.uleb128 0x5
 800 003f 49       		.uleb128 0x49
 801 0040 13       		.uleb128 0x13
 802 0041 00       		.byte	0
 803 0042 00       		.byte	0
 804 0043 06       		.uleb128 0x6
 805 0044 35       		.uleb128 0x35
 806 0045 00       		.byte	0
 807 0046 49       		.uleb128 0x49
 808 0047 13       		.uleb128 0x13
 809 0048 00       		.byte	0
 810 0049 00       		.byte	0
 811 004a 07       		.uleb128 0x7
 812 004b 2E       		.uleb128 0x2e
 813 004c 01       		.byte	0x1
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 20


 814 004d 3F       		.uleb128 0x3f
 815 004e 19       		.uleb128 0x19
 816 004f 03       		.uleb128 0x3
 817 0050 0E       		.uleb128 0xe
 818 0051 3A       		.uleb128 0x3a
 819 0052 0B       		.uleb128 0xb
 820 0053 3B       		.uleb128 0x3b
 821 0054 0B       		.uleb128 0xb
 822 0055 49       		.uleb128 0x49
 823 0056 13       		.uleb128 0x13
 824 0057 11       		.uleb128 0x11
 825 0058 01       		.uleb128 0x1
 826 0059 12       		.uleb128 0x12
 827 005a 06       		.uleb128 0x6
 828 005b 40       		.uleb128 0x40
 829 005c 18       		.uleb128 0x18
 830 005d 9642     		.uleb128 0x2116
 831 005f 19       		.uleb128 0x19
 832 0060 01       		.uleb128 0x1
 833 0061 13       		.uleb128 0x13
 834 0062 00       		.byte	0
 835 0063 00       		.byte	0
 836 0064 08       		.uleb128 0x8
 837 0065 34       		.uleb128 0x34
 838 0066 00       		.byte	0
 839 0067 03       		.uleb128 0x3
 840 0068 0E       		.uleb128 0xe
 841 0069 3A       		.uleb128 0x3a
 842 006a 0B       		.uleb128 0xb
 843 006b 3B       		.uleb128 0x3b
 844 006c 0B       		.uleb128 0xb
 845 006d 49       		.uleb128 0x49
 846 006e 13       		.uleb128 0x13
 847 006f 02       		.uleb128 0x2
 848 0070 18       		.uleb128 0x18
 849 0071 00       		.byte	0
 850 0072 00       		.byte	0
 851 0073 09       		.uleb128 0x9
 852 0074 34       		.uleb128 0x34
 853 0075 00       		.byte	0
 854 0076 03       		.uleb128 0x3
 855 0077 08       		.uleb128 0x8
 856 0078 3A       		.uleb128 0x3a
 857 0079 0B       		.uleb128 0xb
 858 007a 3B       		.uleb128 0x3b
 859 007b 0B       		.uleb128 0xb
 860 007c 49       		.uleb128 0x49
 861 007d 13       		.uleb128 0x13
 862 007e 02       		.uleb128 0x2
 863 007f 18       		.uleb128 0x18
 864 0080 00       		.byte	0
 865 0081 00       		.byte	0
 866 0082 0A       		.uleb128 0xa
 867 0083 0B       		.uleb128 0xb
 868 0084 01       		.byte	0x1
 869 0085 11       		.uleb128 0x11
 870 0086 01       		.uleb128 0x1
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 21


 871 0087 12       		.uleb128 0x12
 872 0088 06       		.uleb128 0x6
 873 0089 01       		.uleb128 0x1
 874 008a 13       		.uleb128 0x13
 875 008b 00       		.byte	0
 876 008c 00       		.byte	0
 877 008d 0B       		.uleb128 0xb
 878 008e 0B       		.uleb128 0xb
 879 008f 01       		.byte	0x1
 880 0090 11       		.uleb128 0x11
 881 0091 01       		.uleb128 0x1
 882 0092 12       		.uleb128 0x12
 883 0093 06       		.uleb128 0x6
 884 0094 00       		.byte	0
 885 0095 00       		.byte	0
 886 0096 0C       		.uleb128 0xc
 887 0097 01       		.uleb128 0x1
 888 0098 01       		.byte	0x1
 889 0099 49       		.uleb128 0x49
 890 009a 13       		.uleb128 0x13
 891 009b 01       		.uleb128 0x1
 892 009c 13       		.uleb128 0x13
 893 009d 00       		.byte	0
 894 009e 00       		.byte	0
 895 009f 0D       		.uleb128 0xd
 896 00a0 21       		.uleb128 0x21
 897 00a1 00       		.byte	0
 898 00a2 49       		.uleb128 0x49
 899 00a3 13       		.uleb128 0x13
 900 00a4 2F       		.uleb128 0x2f
 901 00a5 0B       		.uleb128 0xb
 902 00a6 00       		.byte	0
 903 00a7 00       		.byte	0
 904 00a8 0E       		.uleb128 0xe
 905 00a9 34       		.uleb128 0x34
 906 00aa 00       		.byte	0
 907 00ab 03       		.uleb128 0x3
 908 00ac 0E       		.uleb128 0xe
 909 00ad 3A       		.uleb128 0x3a
 910 00ae 0B       		.uleb128 0xb
 911 00af 3B       		.uleb128 0x3b
 912 00b0 05       		.uleb128 0x5
 913 00b1 49       		.uleb128 0x49
 914 00b2 13       		.uleb128 0x13
 915 00b3 3F       		.uleb128 0x3f
 916 00b4 19       		.uleb128 0x19
 917 00b5 3C       		.uleb128 0x3c
 918 00b6 19       		.uleb128 0x19
 919 00b7 00       		.byte	0
 920 00b8 00       		.byte	0
 921 00b9 0F       		.uleb128 0xf
 922 00ba 34       		.uleb128 0x34
 923 00bb 00       		.byte	0
 924 00bc 03       		.uleb128 0x3
 925 00bd 0E       		.uleb128 0xe
 926 00be 3A       		.uleb128 0x3a
 927 00bf 0B       		.uleb128 0xb
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 22


 928 00c0 3B       		.uleb128 0x3b
 929 00c1 0B       		.uleb128 0xb
 930 00c2 49       		.uleb128 0x49
 931 00c3 13       		.uleb128 0x13
 932 00c4 3F       		.uleb128 0x3f
 933 00c5 19       		.uleb128 0x19
 934 00c6 02       		.uleb128 0x2
 935 00c7 18       		.uleb128 0x18
 936 00c8 00       		.byte	0
 937 00c9 00       		.byte	0
 938 00ca 00       		.byte	0
 939              		.section	.debug_aranges,"",%progbits
 940 0000 1C000000 		.4byte	0x1c
 941 0004 0200     		.2byte	0x2
 942 0006 00000000 		.4byte	.Ldebug_info0
 943 000a 04       		.byte	0x4
 944 000b 00       		.byte	0
 945 000c 0000     		.2byte	0
 946 000e 0000     		.2byte	0
 947 0010 00000000 		.4byte	.LFB64
 948 0014 C8020000 		.4byte	.LFE64-.LFB64
 949 0018 00000000 		.4byte	0
 950 001c 00000000 		.4byte	0
 951              		.section	.debug_ranges,"",%progbits
 952              	.Ldebug_ranges0:
 953 0000 00000000 		.4byte	.LFB64
 954 0004 C8020000 		.4byte	.LFE64
 955 0008 00000000 		.4byte	0
 956 000c 00000000 		.4byte	0
 957              		.section	.debug_line,"",%progbits
 958              	.Ldebug_line0:
 959 0000 D9010000 		.section	.debug_str,"MS",%progbits,1
 959      02004C01 
 959      00000201 
 959      FB0E0D00 
 959      01010101 
 960              	.LASF20:
 961 0000 456D756C 		.ascii	"EmulatedData\000"
 961      61746564 
 961      44617461 
 961      00
 962              	.LASF35:
 963 000d 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 963      43313120 
 963      352E342E 
 963      31203230 
 963      31363036 
 964 0040 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 964      20726576 
 964      6973696F 
 964      6E203233 
 964      37373135 
 965 0073 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 965      66756E63 
 965      74696F6E 
 965      2D736563 
 965      74696F6E 
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 23


 966              	.LASF29:
 967 009b 61766572 		.ascii	"average_value\000"
 967      6167655F 
 967      76616C75 
 967      6500
 968              	.LASF9:
 969 00a9 5F5F696E 		.ascii	"__int32_t\000"
 969      7433325F 
 969      7400
 970              	.LASF19:
 971 00b3 4F757470 		.ascii	"Output\000"
 971      757400
 972              	.LASF21:
 973 00ba 436F6E74 		.ascii	"ContinuouslySendData\000"
 973      696E756F 
 973      75736C79 
 973      53656E64 
 973      44617461 
 974              	.LASF14:
 975 00cf 666C6F61 		.ascii	"float\000"
 975      7400
 976              	.LASF26:
 977 00d5 73637261 		.ascii	"scratch\000"
 977      74636800 
 978              	.LASF32:
 979 00dd 6D73675F 		.ascii	"msg_int\000"
 979      696E7400 
 980              	.LASF27:
 981 00e5 73616D70 		.ascii	"sample_count\000"
 981      6C655F63 
 981      6F756E74 
 981      00
 982              	.LASF30:
 983 00f2 72657475 		.ascii	"returnValue\000"
 983      726E5661 
 983      6C756500 
 984              	.LASF5:
 985 00fe 6C6F6E67 		.ascii	"long unsigned int\000"
 985      20756E73 
 985      69676E65 
 985      6420696E 
 985      7400
 986              	.LASF3:
 987 0110 73686F72 		.ascii	"short unsigned int\000"
 987      7420756E 
 987      7369676E 
 987      65642069 
 987      6E7400
 988              	.LASF33:
 989 0123 49544D5F 		.ascii	"ITM_RxBuffer\000"
 989      52784275 
 989      66666572 
 989      00
 990              	.LASF1:
 991 0130 756E7369 		.ascii	"unsigned char\000"
 991      676E6564 
 991      20636861 
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 24


 991      7200
 992              	.LASF23:
 993 013e 53656E64 		.ascii	"SendEmulatedData\000"
 993      456D756C 
 993      61746564 
 993      44617461 
 993      00
 994              	.LASF15:
 995 014f 646F7562 		.ascii	"double\000"
 995      6C6500
 996              	.LASF2:
 997 0156 73686F72 		.ascii	"short int\000"
 997      7420696E 
 997      7400
 998              	.LASF12:
 999 0160 75696E74 		.ascii	"uint16\000"
 999      313600
 1000              	.LASF37:
 1001 0167 433A5C55 		.ascii	"C:\\UserData\\z004e6he\\OneDrive - Siemens AG\\Docu"
 1001      73657244 
 1001      6174615C 
 1001      7A303034 
 1001      65366865 
 1002 0196 6D656E74 		.ascii	"ments\\PSoC Creator\\PSoC\\Exercise5\\LucaSpenglerP"
 1002      735C5053 
 1002      6F432043 
 1002      72656174 
 1002      6F725C50 
 1003 01c5 536F4335 		.ascii	"SoC5OneWire.cydsn\000"
 1003      4F6E6557 
 1003      6972652E 
 1003      63796473 
 1003      6E00
 1004              	.LASF13:
 1005 01d7 75696E74 		.ascii	"uint32\000"
 1005      333200
 1006              	.LASF38:
 1007 01de 6D61696E 		.ascii	"main\000"
 1007      00
 1008              	.LASF8:
 1009 01e3 756E7369 		.ascii	"unsigned int\000"
 1009      676E6564 
 1009      20696E74 
 1009      00
 1010              	.LASF7:
 1011 01f0 6C6F6E67 		.ascii	"long long unsigned int\000"
 1011      206C6F6E 
 1011      6720756E 
 1011      7369676E 
 1011      65642069 
 1012              	.LASF34:
 1013 0207 67414443 		.ascii	"gADC_ISR\000"
 1013      5F495352 
 1013      00
 1014              	.LASF10:
 1015 0210 696E7433 		.ascii	"int32_t\000"
 1015      325F7400 
ARM GAS  C:\Users\z004e6he\AppData\Local\Temp\ccqyEmpi.s 			page 25


 1016              	.LASF24:
 1017 0218 5472616E 		.ascii	"TransmitBuffer\000"
 1017      736D6974 
 1017      42756666 
 1017      657200
 1018              	.LASF18:
 1019 0227 73697A65 		.ascii	"sizetype\000"
 1019      74797065 
 1019      00
 1020              	.LASF6:
 1021 0230 6C6F6E67 		.ascii	"long long int\000"
 1021      206C6F6E 
 1021      6720696E 
 1021      7400
 1022              	.LASF36:
 1023 023e 6D61696E 		.ascii	"main.c\000"
 1023      2E6300
 1024              	.LASF16:
 1025 0245 63686172 		.ascii	"char\000"
 1025      00
 1026              	.LASF28:
 1027 024a 73616D70 		.ascii	"sample_sum\000"
 1027      6C655F73 
 1027      756D00
 1028              	.LASF25:
 1029 0255 53616D70 		.ascii	"SampleTracker\000"
 1029      6C655472 
 1029      61636B65 
 1029      7200
 1030              	.LASF11:
 1031 0263 75696E74 		.ascii	"uint8\000"
 1031      3800
 1032              	.LASF4:
 1033 0269 6C6F6E67 		.ascii	"long int\000"
 1033      20696E74 
 1033      00
 1034              	.LASF17:
 1035 0272 6C6F6E67 		.ascii	"long double\000"
 1035      20646F75 
 1035      626C6500 
 1036              	.LASF31:
 1037 027e 6D73675F 		.ascii	"msg_frac\000"
 1037      66726163 
 1037      00
 1038              	.LASF0:
 1039 0287 7369676E 		.ascii	"signed char\000"
 1039      65642063 
 1039      68617200 
 1040              	.LASF22:
 1041 0293 53656E64 		.ascii	"SendSingleByte\000"
 1041      53696E67 
 1041      6C654279 
 1041      746500
 1042              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
